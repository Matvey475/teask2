import telebot, os, random, requests

images =os.listdir('images')
bot = telebot.TeleBot("7610454243:AAHLprl1j21iVW3cmAUKbDC9AuEtOA4BxJY")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,"Привет! Я твой Telegram бот. Напиши что-нибудь!")

@bot.message_handler(commands=['bio'])
def send_welcome(message):
    list_bio = ["Офисная бумага разлагается — 2 года",
                "Шерстяные носки разлагаются — 1–5 лет",
                "Строительная доска разлагается — 10 лет",
                "Кожаные ботинки разлагаются — 25–40 лет",
                "Нейлоновые ткани разлагаются — 30–40 лет",
                "Консервные банки разлагаются — 50–100 лет",
                "Автомобильные покрышки разлагаются — 120–140 лет",
                "Стеклянная бутылка разлагается — до 1 000 лет",
                "Алюминиевые банки, фольга разлагаются— 80–100 лет",
                "Пакет из пластика, пластиковый стаканчик разлагаются — до 500 лет"]
    bot.reply_to(message, random.choice(list_bio))

@bot.message_handler(commands=['biohelp'])
def send_welcome(message):
    bot.reply_to(message,"Вот вам подсказка на тему: 'какие бывают отходы'")
    bot.reply_to(message,"Отходы можно классифицировать по разным критериям, включая происхождение, состав, опасность и другие факторы. \n Некоторые категории отходов и их примеры:\n \nПо источнику происхождения:\n\nОтходы производства. \nОстатки сырья, которое использовалось для изготовления новых продуктов и по каким-либо причинам утратило свои свойства. \n\nПримеры: \nотходы из рудников и шахт, \nостатки сельскохозяйственного сырья, потерявшие эксплуатационные характеристики материалы. \n\n отходы потребления. Образуются в результате использования или износа первоначального продукта. \n\nПримеры:\n металл, \nтекстиль, \nпластик, \nстекло, \nбумага, \nлампы, \nэлектроника, \nпищевой мусор. \n\nПо природе происхождения:\nХимические. Вещества или комплекс веществ, которые были получены в химических лабораториях или заводах. \n\nПримеры:\nртуть, \nщелочь, \nкислоты, \nрастворители, \nпестициды, \nмасла и электролиты. \n\nМинеральные. В эту категорию входят изделия с минералами в составе, у которых истёк срок годности или выявлены повреждения. \nТакие отходы обычно возникают в результате горнодобывающей и стеклообрабатывающей промышленности, а также при изготовлении удобрений и стройматериалов. \n\nорганические. \nЭто мусор, который способен самостоятельно разлагаться и образовывать питательные элементы. \nВ эту категорию входят пропавшие пищевые продукты, а также отходы жизнедеятельности животных и людей. \n\nКоммунальные. \nОстатки продуктов потребления или производства, которые потеряли свои свойства в процессе использования. \nК ним можно отнести упаковку, мебель, оборудование и инструменты. \n\nПо агрегатному состоянию:\nтвёрдые; \nжидкие; \nсыпучие; \nпастообразные; \nгелеобразные; \nгазообразные. \n\nПо возможности переработки:\nПригодные для создания вторсырья и последующего использования в производстве. \n\nПримеры:\nдревесина, \nбумага, \nпластик, \nполиэтилен, \nпродукты питания. \n\nПодлежащие уничтожению или захоронению в первоначальном виде. \nК этой категории относится мусор, который невозможно или экономически невыгодно перерабатывать.")

@bot.message_handler(commands=['biochallenge'])
def send_welcome(message):
    list_bio2 = ["Вычистить лес от мусора",
                "Избавиться от пластика в доме",
                "Прорекламировать эко-движение",
                "Заручиться помощью от World Green Building Council"]
    bot.reply_to(message, random.choice(list_bio2))

@bot.message_handler(commands=['mem'])
def send_mem(message):
    img_name = random.choice(images)
    with open(f'images/{img_name}', 'rb') as f:
            bot.send_photo(message.chat.id, f)


def get_duck_image_url():
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']

@bot.message_handler(commands=['duck'])
def duck(message):
    image_url = get_duck_image_url()
    bot.reply_to(message, image_url)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)
bot.infinity_polling()
